{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Motorola 68000",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "constant.numeric",
				"match": "^#((\\$([A-Fa-f0-9]+)|\\d+|(%[01]+)))$"
			},
			{
				"name": "meta.preprocessor.numeric",
				"match": "^((\\$([A-Fa-f0-9]+)|\\d+|(%[01]+)))$"
			},
			{
				"name": "entity.name",
				"match": "^a(bcd(\\.b)?|nd(i)?(\\.(b|w|l))?|dd((i|q|x)(\\.(b|w|l))?|(a)(\\.(w|l))?)?|(sl|sr)(\\.(b|w|l))?)$"
			},
			{
				"name": "entity.name",
				"match": "^b(h(i|s)|l(s|o|t|e)|cc|ne|eq|v(c|s)|pl|mi|g(e|t)|r(a|s))(\\.(b|w|s|l))?|(c(hg|lr)|set|tst)(\\.(b|l))?$"
			},
			{
				"name": "entity.name",
				"match": "^c(hk(\\.w)?|mp((i|m)?(\\.(b|w|l))?|a(\\.(w|l))?))$"
			},
			{
				"name": "entity.name",
				"match": "^d(b(h(i|s)|l(s|o|t|e)|c(c|s)|ne|eq|v(c|s)|pl|mi|g(e|t)|ra)(\\.(b|w|s|l))?|iv(s|u)(\\.w)?)$"
			},
			{
				"name": "entity.name",
				"match": "^e(ori?(\\.(b|w|l))?|x(g(\\.l)?|t(\\.(w|l))?))$"
			},
			{
				"name": "entity.name",
				"match": "^illegal$"
			},
			{
				"name": "entity.name",
				"match": "^j(mp|sr)$"
			},
			{
				"name": "entity.name",
				"match": "^l(ea(\\.l)?|(sl|sr)(\\.(b|w|l))?)$"
			},
			{
				"name": "entity.name",
				"match": "^m(ove((\\.(b|w|l))?|(a|m|p)(\\.(w|l))?|q(\\.l)?)|ul(u|s)(\\.w)?)$"
			},
			{
				"name": "entity.name",
				"match": "^n(bcd(\\.b)?|egx?(\\.(b|w|l))?|o(p|t(\\.(b|w|l))?))$"
			},
			{
				"name": "entity.name",
				"match": "^pea(\\.l)?$"
			},
			{
				"name": "entity.name",
				"match": "^r(eset|ox?(l|r)(\\.(b|w|l))?|t(e|r|s))$"
			},
			{
				"name": "entity.name",
				"match": "^s(bcd(\\.b)?|(s(f|t)|h(i|s)|l(s|o|t|e)|c(c|s)|ne|eq|v(c|s)|pl|mi|g(e|t))(\\.b)?|top|ub((i|q|x)?(\\.(b|w|l))?|(a)(\\.(w|l)?))|wap(\\.w)?)$"
			},
			{
				"name": "entity.name",
				"match": "^t(as(\\.b)?|rapv?|st(\\.(b|w|l))?)$"
			},
			{
				"name": "entity.name",
				"match": "^unlk$"
			}
			
		]
		},
		"strings": {
			"name": "string.quoted.double.asm68k",
			"begin": "\"",
			"end": "\"",
			"patterns": [{
					"name": "constant.character.escape.asm68k",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.asm68k"
}